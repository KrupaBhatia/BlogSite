  if (isValidString(data).length != 0)
        return res.status(404).send({status: false, msg: "Input can't be empty"})
        
        if(isValidString(data.title != 0))
        return res.status(400).send({ status: false, msg: "Title is required"})

        if(!isValidString(data.body))
        return res.status(400).send({ status: false, msg: "Body is required"})

        if(!isValidString(data.subcategory))
        return res.status(400).send({ status: false, msg : "Subcategory is required"})
        
        if(!isValidString(data.tags))
        return res.status(400).send({ status: false, msg: "Tag is required"})




        let updatedBlog = await blogModel.findOneAndUpdate({ _id: blogId }, {$set: {ispublished:true, title:blogData}}, {new: true});



       
// --------------------------------------- POST /blogs --------------------------------------

const createBlog = async function (req, res) {
    try {
        let blog = req.body
        // getting the author with their Id and checking for validation
        let authorId = await authorModel.find().select({ _id: 1 })
        authorIdArr = authorId.map((obj) => { return obj._id.toString() })

        // if validation is true , create a blog
        if (blog.authorId != undefined) {
            if (authorIdArr.includes(blog.authorId)) {
                let blogCreated = await blogModel.create(blog)
                return res.status(201).send({ data: blogCreated })
            }
            res.status(400).send("Author doesn't exist")
        }

        // Authentication of Author
        // let auth_id = req.params.userId
        // let authorDetails = await authorModel.findById(auth_id);
        // if (!authorDetails)
        //     return res.status(401).send({ status: false, Msg: "No such author exists" })
        // res.status(200).send({ status: true, msg: authorDetails })

    } catch (error) {
        res.status(500).send({ status: false, Error: error.message })
    }
}